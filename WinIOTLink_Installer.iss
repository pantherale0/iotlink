; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include <idp.iss>

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{CD785E2E-5102-4053-A1E1-208CA1D8DC98}
AppName=IOT Link
AppVersion=0.1
;AppVerName=Win IOT Link 0.1
AppPublisher=Alexandre Leites
AppPublisherURL=http://alexslx.com/
AppSupportURL=http://alexslx.com/
AppUpdatesURL=http://alexslx.com/
DefaultDirName={commonpf}\WinIOTLink
DefaultGroupName=IOT Link
AllowNoIcons=yes
LicenseFile=LICENSE
OutputDir=Setup
OutputBaseFilename=WinIOTLink_Installer
Compression=lzma
SolidCompression=yes
UsePreviousAppDir=yes
PrivilegesRequired=admin
WizardStyle=modern

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "WinIOTLink\bin\Release\WinIOTLink.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "WinIOTLink\bin\Release\MQTTnet.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "WinIOTLink\bin\Release\Newtonsoft.Json.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "WinIOTLink\bin\Release\WinIOTLink.exe.config"; DestDir: "{app}"; Flags: ignoreversion
Source: "WinIOTLink\bin\Release\YamlDotNet.dll"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "Setup\config.yaml-sample"; DestDir: "{app}\Data"; DestName: "configuration.yaml"; Flags: confirmoverwrite createallsubdirs recursesubdirs

[Icons]
Name: "{group}\Start Windows Service"; Filename: "net.exe"; WorkingDir: "{sys}"; Parameters: "start winiotlink"; Comment: "Start IOT Link Service"; AfterInstall: SetElevationBit('{group}\Start Windows Service.lnk')
Name: "{group}\Stop Windows Service"; Filename: "net.exe"; WorkingDir: "{sys}"; Parameters: "stop winiotlink"; Comment: "Stop IOT Link Service"; AfterInstall: SetElevationBit('{group}\Stop Windows Service.lnk')
Name: "{group}\Install Windows Service"; Filename: "{app}\WinIOTLink.exe"; WorkingDir: "{app}"; Parameters: "--install"; AfterInstall: SetElevationBit('{group}\Install Windows Service.lnk')
Name: "{group}\Uninstall WindowsService"; Filename: "{app}\WinIOTLink.exe"; WorkingDir: "{app}"; Parameters: "--uninstall"; AfterInstall: SetElevationBit('{group}\Uninstall WindowsService.lnk')

[Run]
Filename: "{app}\WinIOTLink.exe"; Parameters: "--install"; WorkingDir: "{app}"; Flags: postinstall runhidden; Description: "Install IOT Link as Service"; StatusMsg: "Installing Windows Service"

[UninstallRun]
Filename: "{app}\WinIOTLink.exe"; Parameters: "--uninstall"; WorkingDir: "{app}"; Flags: runhidden

[Dirs]
Name: "{app}\Data"
Name: "{app}\Logs"
Name: "{app}\Addons"

[Code]
procedure SetElevationBit(Filename: string);
var
  Buffer: string;
  Stream: TStream;
begin
  Filename := ExpandConstant(Filename);
  Log('Setting elevation bit for ' + Filename);

  Stream := TFileStream.Create(FileName, fmOpenReadWrite);
  try
    Stream.Seek(21, soFromBeginning);
    SetLength(Buffer, 1);
    Stream.ReadBuffer(Buffer, 1);
    Buffer[1] := Chr(Ord(Buffer[1]) or $20);
    Stream.Seek(-1, soFromCurrent);
    Stream.WriteBuffer(Buffer, 1);
  finally
    Stream.Free;
  end;
end;

function DotNetFramework472IsNotInstalled(): Boolean;
var
  bSuccess: Boolean;
  regVersion: Cardinal;
begin
  Result := True;
  bSuccess := RegQueryDWordValue(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', regVersion);
  if (True = bSuccess) and (regVersion >= 461808) then begin
    Result := False;
  end;
end;

procedure InitializeWizard;
begin
  if DotNetFramework472IsNotInstalled() then
  begin
    idpAddFile('http://go.microsoft.com/fwlink/?linkid=863265', ExpandConstant('{tmp}\DotNetFrameworkInstaller.exe'));
    idpDownloadAfter(wpReady);
  end;
end;

procedure InstallDotNetFramework;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Installing .NET Framework 4.7.2. This might take a few minutes...';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\DotNetFrameworkInstaller.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
    end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;
    DeleteFile(ExpandConstant('{tmp}\DotNetFrameworkInstaller.exe'));
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  case CurStep of
    ssPostInstall:
      begin
        if DotNetFramework472IsNotInstalled() then
        begin
          InstallDotNetFramework();
        end;
      end;
  end;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpFinished then
    WizardForm.RunList.Visible := False;
end;
